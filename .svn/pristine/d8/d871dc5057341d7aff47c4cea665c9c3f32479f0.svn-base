package model.plate;

import java.awt.Component;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.geom.Point2D;
import java.awt.geom.Point2D.Double;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FilenameFilter;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;

import org.apache.commons.io.FilenameUtils;

import model.plate.objects.ArmState;
import model.plate.objects.BorderFrame;
import model.plate.objects.Plate;
import model.plate.objects.PlateSpecifications;
import model.plate.objects.Well;

/**
 * Model that keeps track of the current state of the frame, cell plates, and the wells themselves. Essentially,
 * keeps track of the physical world, any updates the user makes to it, and relays this between the view and
 * serial communication model.
 * @author Christian
 *
 */
public class PlateModel {

	/**
	 * Adapter from plate model to main view.
	 */
	private PlateModelToViewAdapter viewAdapter;
	
	/**
	 * Adapter from plate model to serial model.
	 */
	private TaskAdapter taskModel;
	
	/**
	 * Dispatcher to talk to all wells.
	 */
	private WellDispatcher dispatcher;
	
	/**
	 * All the plates that are currently on the screen.
	 */
	private ArrayList<Plate> plates;
	
	/**
	 * The border representing the area the arm can move over.
	 */
	private BorderFrame border;
	
	/**
	 * Current location of the arm, in steps.
	 */
	private ArmState armState;
	
	/**
	 * Total number of wells on the area now.
	 */
	private int totalNumWells;
	
	/**
	 * Extension to save plate specifications with.
	 */
	private String plateSpecExt = ".txt";
	
	/**
	 * Constructor that links the model to view via its adapter.
	 * @param _adapter - adapter linking model to view
	 */
	public PlateModel(PlateModelToViewAdapter viewAdapter, TaskAdapter serialAdapter){
		totalNumWells = 1;
		dispatcher = new WellDispatcher();
		this.viewAdapter = viewAdapter;
		this.taskModel = serialAdapter;
		plates = new ArrayList<Plate>();
	}
	
	/**
	 * Sets the width/length of the area our arm can move over, as well as
	 * where to draw it in the view.
	 * @param bounds - width/length of the area arm can move over
	 * @param canvas - canvas to draw the bounding box on
	 */
	public void setBorderFrame(Point2D bounds, Component canvas){
		armState = new ArmState(bounds, dispatcher);
		border = new BorderFrame(bounds, canvas);
		viewAdapter.updateView();
	}
	
	/**
	 * Saves the given plate specifications into a file in the plates data folder.
	 * @param nickname - name to later refer to this plate spec, for loading
	 * @param plateSpecs - object encompassing all datasheet information
	 */
	public void savePlate(String nickname, PlateSpecifications plateSpecs){
		String filename = "data/plates/" + nickname + plateSpecExt;
		
		FileOutputStream fos = null;
		ObjectOutputStream oos = null;
		
		try {
			fos = new FileOutputStream(filename);
			oos = new ObjectOutputStream(fos);
			oos.writeObject(plateSpecs);
			oos.close();
		} 
		catch (Exception ex) {
			ex.printStackTrace();
		}
	}
	
	/**
	 * Loads plate with the given filename, returning it to the view to be put in correct fields.
	 * @param name - filename to look for the specifications
	 */
	public PlateSpecifications loadPlate(String name){
		PlateSpecifications specs = null;
		
		FileInputStream fis = null;
	    ObjectInputStream in = null;
	 
	    try {
	    	fis = new FileInputStream("data/plates/" + name + plateSpecExt);
	    	in = new ObjectInputStream(fis);
	    	specs = (PlateSpecifications) in.readObject();
	    	in.close();
	    } 
	    catch (Exception ex) {
	    	ex.printStackTrace();
	    }
	    return specs;
	}
	
	/**
	 * Deletes previously saved plate specification that matches the given filename.
	 * @param filename - name of the plate specification to load
	 */
	public void deleteSavedSpecs(String filename){
		File specFile = new File("data/plates/" + filename + plateSpecExt);
		specFile.delete();
	}
	
	/**
	 * Iterates through files in the plate specification folder, returning an iterable of each name.
	 * @return Iterable of previously saved specifications
	 */
	public Iterable<String> getSpecList(){
		FilenameFilter filter = new FilenameFilter(){
			@Override
			public boolean accept(File dir, String name) {
				return (name.endsWith(plateSpecExt));
			}
		};
		 
		File dir = new File("data/plates");
 
		//if we can't find plate specification directory, say so
		if (dir.isDirectory() == false) {
			System.out.println("Directory does not exists : " + "data/plates");
			return new ArrayList<String>();
		}
 
		//list all the files and filter by the extension
		String[] list = dir.list(filter);
 
		//if not files exist
		if (list.length == 0) {
			System.out.println("no files end with : " + plateSpecExt);
			return new ArrayList<String>();
		}
 
		ArrayList<String> returnList = new ArrayList<String>();
		
		for (String file : list) {
			returnList.add(FilenameUtils.removeExtension(file));
		}
		
		return returnList;
	}
	
	/**
	 * Called by the controller, performs any start up tasks necessary for the model.
	 */
	public void start(){
	}
	
	/**
	 * Adds a plate to the current ArrayList of plates when requested.
	 * @param numberingOrder - order to number all the wells on the plate
	 * @param _platePos - where to position the (currently) top left corner of the plate
	 * @param _specs - set of specifications for this particular plate, usually from data sheet
	 */
	public void addPlate(String numberingOrder, Point2D _platePos, PlateSpecifications _specs){
		Plate plate = new Plate(_platePos, _specs);
		plates.add(plate);
		totalNumWells = plate.addAllWells(dispatcher, numberingOrder, totalNumWells);
		viewAdapter.updateView();
	}
	
	/**
	 * When the request is received from the view, draw everything necessary (border, plates, wells).
	 * @param g - graphics object to draw everything with
	 */
	public void paintAll(final Graphics g){
		final double sF = border.getScaleFactor();
		//tell the border to paint itself
		border.drawBorderFrame(g);
		//tell all plates to paint themselves
		for (int i = 0; i < plates.size(); i++){
			plates.get(i).paint(g, sF);
		}
		//tell dispatcher to get all wells to paint
		dispatcher.notifyAll(
			new IWellCmd(){
				public void apply(Well context, WellDispatcher disp){
					context.paint(g, sF);
				}
			}
		);
		//tell the serial model to draw whatever tasks it needs to
		taskModel.drawTasks(g, sF);
	}
	
	/**
	 * Clears all plates from the model.
	 */
	public void clearAllPlates(){
		totalNumWells = 1;
		plates.clear();
		dispatcher.deleteObservers();
		viewAdapter.updateView();
	}
	
	/**
	 * Returns the well's location given its number.
	 * @return location of the well, in cm from origin
	 */
	public Point2D getLocationFromNumber(final int wellNumber){
		//find well with the input number through the dispatcher
		final ArrayList<Point2D> returnPoint = new ArrayList<Point2D>();
		//set a default value to return if nothing is found
		returnPoint.add(new Point2D.Double(-1,-1));
		dispatcher.notifyAll(
			new IWellCmd(){
				public void apply(Well context, WellDispatcher disp){
					if (context.getNumber() == wellNumber){
						//if we find a match, overwrite the default value
						returnPoint.set(0, context.getAbsoluteLocation());
					}
				}
			}
		);
		//if no well matches the number, tell the user and return a bad location
		if (returnPoint.get(0).equals(new Point2D.Double(-1,-1))){
			System.out.println("Could not find the well with specified number.");
		}
		return returnPoint.get(0);
	}

	/**
	 * @return variable encompassing current arm state
	 */
	public ArmState getArmState() {
		return armState;
	}
	
	/**
	 * @return dispatcher for all wells
	 */
	public WellDispatcher getWellDispatcher(){
		return dispatcher;
	}

	public Point2D getLocationFromScreen(Point point) {
		final Point2D clicked = new Point2D.Double(point.x/border.getScaleFactor(), point.y/border.getScaleFactor());
		final ArrayList<Point2D> returnPoint = new ArrayList<Point2D>();
		returnPoint.add(null);
		dispatcher.notifyAll(
			new IWellCmd(){
				public void apply(Well context, WellDispatcher disp){
					if (context.getAbsoluteLocation().distance(clicked) < context.getDiameter()/2){
						returnPoint.set(0,context.getAbsoluteLocation());
					}
				}
			}
		);
		return returnPoint.get(0);
	}
}
