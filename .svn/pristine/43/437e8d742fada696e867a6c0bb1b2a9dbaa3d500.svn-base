package model.serialization;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FilenameFilter;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;

import model.plate.objects.PlateSpecifications;

import org.apache.commons.io.FilenameUtils;

/**
 * Model that handles all serialization (saving to and loading data from files).
 * @author christianhenry
 *
 */
public class SerializationModel {

	/**
	 * Adapter to access task model.
	 */
	private TaskAdapter taskModel;
	
	/**
	 * Adapter to access plate model.
	 */
	private PlateAdapter plateModel;
	
	/**
	 * Extension to save files with.
	 */
	private String ext = ".txt";
	
	/**
	 * On initialization, connects to given adapters.
	 */
	public SerializationModel(TaskAdapter taskModel, PlateAdapter plateModel){
		this.taskModel = taskModel;
		this.plateModel = plateModel;
	}
	
	public void start(){
		
	}
	
	/**
	 * Saves the given plate specifications into a file in the plates data folder.
	 * @param nickname - name to later refer to this plate spec, for loading
	 * @param plateSpecs - object encompassing all datasheet information
	 */
	public void savePlate(String nickname, PlateSpecifications plateSpecs){
		String filename = "data/plates/" + nickname + ext;
		
		FileOutputStream fos = null;
		ObjectOutputStream oos = null;
		
		try {
			fos = new FileOutputStream(filename);
			oos = new ObjectOutputStream(fos);
			oos.writeObject(plateSpecs);
			oos.close();
		} 
		catch (Exception ex) {
			ex.printStackTrace();
		}
	}
	
	/**
	 * Loads plate with the given filename, returning it to the view to be put in correct fields.
	 * @param name - filename to look for the specifications
	 */
	public PlateSpecifications loadPlate(String name){
		PlateSpecifications specs = null;
		
		FileInputStream fis = null;
	    ObjectInputStream in = null;
	 
	    try {
	    	fis = new FileInputStream("data/plates/" + name + ext);
	    	in = new ObjectInputStream(fis);
	    	specs = (PlateSpecifications) in.readObject();
	    	in.close();
	    } 
	    catch (Exception ex) {
	    	ex.printStackTrace();
	    }
	    return specs;
	}
	
	/**
	 * Deletes previously saved plate specification that matches the given filename.
	 * @param filename - name of the plate specification to load
	 */
	public void deleteSavedSpecs(String filename){
		File specFile = new File("data/plates/" + filename + ext);
		specFile.delete();
	}
	
	/**
	 * Iterates through files in the plate specification folder, returning an iterable of each name.
	 * @return Iterable of previously saved specifications
	 */
	public Iterable<String> getSpecList(){
		FilenameFilter filter = new FilenameFilter(){
			@Override
			public boolean accept(File dir, String name) {
				return (name.endsWith(ext));
			}
		};
		 
		File dir = new File("data/plates");
 
		//if we can't find plate specification directory, say so
		if (dir.isDirectory() == false) {
			System.out.println("Directory does not exists : " + "data/plates");
			return new ArrayList<String>();
		}
 
		//list all the files and filter by the extension
		String[] list = dir.list(filter);
 
		//if not files exist
		if (list.length == 0) {
			System.out.println("no files end with : " + ext);
			return new ArrayList<String>();
		}
 
		ArrayList<String> returnList = new ArrayList<String>();
		
		for (String file : list) {
			returnList.add(FilenameUtils.removeExtension(file));
		}
		
		return returnList;
	}
}
